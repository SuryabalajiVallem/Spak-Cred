{"version":3,"sources":["Main/components/CreditForm/index.js","Main/components/CreditCard/CardBackSide/index.js","Main/components/CreditCard/CardFrontSide/index.js","Main/components/CreditCard/index.js","Main/index.js","App.js","reportWebVitals.js","index.js"],"names":["currentYear","Date","getFullYear","creditExpiryMonths","Array","from","length","x","i","month","creditExpiryYears","_x","useStyles","makeStyles","theme","root","flexGrow","paper","height","width","control","padding","spacing","formControl","minWidth","CreditForm","cardMonth","cardYear","onUpdateState","onFlipCreditCard","children","useState","cardNumber","setCardNumber","React","cardCvv","setCardCvv","classes","boxRef","useRef","cardNumberRef","cardHolderRef","cardExpiryRef","handleFormChange","event","target","name","value","test","getCardType","cardNum","payCardType","regexMap","regEx","cardType","j","match","indexOf","split","d","c","parseInt","f","substr","updateActiveBox","y","current","style","display","borderColor","transform","boxAtDate","resetBox","className","ref","Grid","container","direction","justifyContent","alignItems","item","xs","InputLabel","htmlFor","TextField","type","autoComplete","label","variant","onChange","e","num","replaceAll","ctype","toLowerCase","tempCardNumber","slice","replace","trim","onFocus","onBlur","id","FormControl","Select","labelId","map","val","index","MenuItem","CARDS","visa","amex","mastercard","discover","unionpay","troy","diners","CreditBackSide","props","cardCvvNumber","setCardCvvNumber","useCardType","useMemo","re","number","Object","entries","card","pattern","RegExp","useEffect","finalCardCvvArray","temp","push","inline","text","springConfig","stiffness","damping","alt","src","process","CreditFrontSide","numArr","setNumArr","formatNumber","char","undefined","color","n","cardHolder","toString","BACKGROUND_IMG","random","Math","floor","cardBackgroundName","CreditCard","cardRef","toggle","myStyle","backgroundImage","initialState","isCardFlipped","fieldType","Main","state","setState","updateStateValues","useCallback","keyName","updateCardFlip","toggleValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dae2331f.chunk.js","sourcesContent":["import React, {useState, useRef } from 'react';\r\n\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n// or\r\nimport { FormControl,InputLabel,TextField,Select,MenuItem } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst currentYear = new Date().getFullYear();\r\nconst creditExpiryMonths = Array.from({ length: 12 }, (x, i) => {\r\n    const month = i + 1;\r\n    return month <= 9 ? '0' + month : month;\r\n});\r\nconst creditExpiryYears = Array.from({ length: 9 }, (_x, i) => currentYear + i);\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      height: 140,\r\n      width: 100,\r\n    },\r\n    control: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n        minWidth: 120,\r\n      },\r\n  }));\r\n\r\nexport default function CreditForm({\r\n    cardMonth,\r\n    cardYear,\r\n    onUpdateState,\r\n    onFlipCreditCard,\r\n    children\r\n}) {\r\n    const [cardNumber, setCardNumber] = useState('');\r\n    const [cardCvv, setCardCvv] = React.useState('');\r\n    const classes = useStyles();\r\n    const boxRef = useRef(null);\r\n    const cardNumberRef = useRef(null);\r\n    const cardHolderRef = useRef(null);\r\n    const cardExpiryRef = useRef(null);\r\n   \r\n    const handleFormChange = (event) => {\r\n        const { name, value } = event.target;\r\n        if (name === 'cardCvv') {\r\n            const regex = /^[0-9]{0,4}$/\r\n            if (regex.test(event.target.value)) {\r\n                setCardCvv(value)\r\n                onUpdateState(name, value);\r\n            }\r\n        }else{\r\n            onUpdateState(name, value);\r\n        }\r\n        \r\n    };\r\n    const updateToggle = function(){\r\n        onFlipCreditCard('180deg')\r\n    };\r\n    const revertToggle = function(){\r\n        onFlipCreditCard('360deg')\r\n    };\r\n    const updateCardNumber = function(e){\r\n        const { name, value } = e.target;\r\n        const regex =  /^[0-9]{0,16}$/\r\n        let num = e.target.value.replaceAll(' ','');\r\n        if(regex.test(num)){\r\n        \r\n            let ctype = getCardType(num).toLowerCase();\r\n            ctype = ctype.length===0?'visa':ctype;\r\n            if(ctype==='amex'){\r\n                let tempCardNumber = (num.slice(0,4).replace(/(.{4})/g, '$1 ') + \r\n                    num.slice(4,10).replace(/(.{6})/g, '$1 ') +\r\n                    num.slice(10,15)).trim();\r\n                setCardNumber(tempCardNumber);\r\n            }\r\n            else\r\n                setCardNumber(num.replace(/(.{4})/g, '$1 ').trim());\r\n        }\r\n        onUpdateState(name, value);\r\n    }\r\n    \r\n    const getCardType = (cardNum) =>{\r\n        var payCardType = \"\";\r\n        var regexMap = [\r\n          {regEx: /^4[0-9]{5}/ig,cardType: \"VISA\"},\r\n          {regEx: /^5[1-5][0-9]{4}/ig,cardType: \"MASTERCARD\"},\r\n          {regEx: /^3[47][0-9]{3}/ig,cardType: \"AMEX\"},\r\n          {regEx: /^(5[06-8]\\d{4}|6\\d{5})/ig,cardType: \"MAESTRO\"}\r\n        ];\r\n        \r\n        for (var j = 0; j < regexMap.length; j++) {\r\n          if (cardNum.match(regexMap[j].regEx)) {\r\n            payCardType = regexMap[j].cardType;\r\n            break;\r\n          }\r\n        }\r\n    \r\n        if (cardNum.indexOf(\"50\") === 0 || cardNum.indexOf(\"60\") === 0 || cardNum.indexOf(\"65\") === 0) {\r\n          var g = \"508500-508999|606985-607984|608001-608500|652150-653149\";\r\n          var i = g.split(\"|\");\r\n          for (var d = 0; d < i.length; d++) {\r\n            var c = parseInt(i[d].split(\"-\")[0], 10);\r\n            var f = parseInt(i[d].split(\"-\")[1], 10);\r\n            if ((cardNum.substr(0, 6) >= c && cardNum.substr(0, 6) <= f) && cardNum.length >= 6) {\r\n             payCardType = \"RUPAY\";\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        return payCardType;\r\n      \r\n    }\r\n    const updateActiveBox = (x,y,width,height) =>{\r\n        boxRef.current.style.display = 'block';\r\n        boxRef.current.style.borderColor='white';\r\n        boxRef.current.style.transform= `translate(${x}rem,${y}rem)`;\r\n        boxRef.current.style.height= `${height}rem`;\r\n        boxRef.current.style.width= `${width}rem`;\r\n    }\r\n    const boxAtCardNumber = ()=>{\r\n        updateActiveBox('1.5','8','21','3');\r\n    }\r\n    const boxAtName = ()=>{\r\n        updateActiveBox('1.5','12.5','21.5','3.6');\r\n    }\r\n    const boxAtDate = ()=>{\r\n        updateActiveBox('23','12.5','6','3.5');\r\n    }\r\n    const resetBox = ()=>{\r\n        boxRef.current.style.borderColor='transparent';\r\n        boxRef.current.style.transform= \"translate(0,0)\";\r\n    }\r\n    return (\r\n        <div className=\"credit-form-container\">\r\n            <div className=\"card-list\">{children}</div>\r\n            <div ref={boxRef} className=\"card-box\"></div>\r\n            <div className=\"credit-form-inner\">\r\n                <Grid container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\" spacing={3}>\r\n                    <Grid item xs={12}  className=\"mb-1\">\r\n                        <InputLabel htmlFor=\"my-input\">Card Number</InputLabel>\r\n                         <TextField ref={cardNumberRef} type=\"text\" value={ cardNumber } className=\"form-control\"  autoComplete=\"off\" label=\"Enter Card Number\" variant=\"outlined\" name= \"cardNumber\"  onChange={updateCardNumber}  onFocus={boxAtCardNumber} onBlur={resetBox}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} className=\"mb-1\">\r\n                        <InputLabel htmlFor=\"my-input\">Card Holder</InputLabel>\r\n                        <TextField ref={cardHolderRef}  style={{width:'100%'}}  id=\"outlined-basic\" name=\"cardHolder\" type=\"tel\"  autoComplete=\"off\" label=\"Enter Card Holder\" onChange={handleFormChange}  onFocus={boxAtName} onBlur={resetBox} variant=\"outlined\" />\r\n                    </Grid>\r\n                        <Grid item xs={3}  spacing={3} >\r\n                            <InputLabel htmlFor=\"my-input\">Expiry Date</InputLabel>\r\n                            <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                            <InputLabel id=\"demo-simple-select-outlined-label\">Month</InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-outlined-label\"\r\n                                    id=\"demo-simple-select-outlined\"\r\n                                    name=\"cardMonth\"\r\n                                    onChange={handleFormChange}\r\n                                    onFocus={boxAtDate}\r\n                                    onBlur={resetBox}\r\n                                    value={cardMonth}\r\n                                    label=\"Month\"\r\n                                    ref={cardExpiryRef}\r\n                                >\r\n                                     {creditExpiryMonths.map((val, index) => (\r\n                                    <MenuItem value={val}>{val}</MenuItem>\r\n                                ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={3}   className=\"mb-2 pt-28\">\r\n                            <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                <InputLabel id=\"demo-simple-select-outlined-label\">Year</InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-outlined-label\"\r\n                                    id=\"demo-simple-select-outlined\"\r\n                                    name=\"cardYear\"\r\n                                    onChange={handleFormChange}\r\n                                    onFocus={boxAtDate}\r\n                                    onBlur={resetBox}\r\n                                    value={cardYear}\r\n                                    ref={cardExpiryRef}\r\n                                    label=\"Year\"\r\n                                >\r\n                                    {creditExpiryYears.map((val, index) => (\r\n                                        <MenuItem value={val}>{val}</MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <InputLabel htmlFor=\"my-input\">CVV</InputLabel>\r\n                            <TextField style={{ width: '100%' }} value={cardCvv}  onFocus={updateToggle}  onBlur={revertToggle} name=\"cardCvv\" onChange={handleFormChange}  id=\"outlined-basic\" type=\"tel\" autoComplete=\"off\" label=\"Enter CVV\" variant=\"outlined\" />\r\n                        </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect,useMemo} from 'react';\r\nimport TextTransition from \"react-text-transition\";\r\nconst CARDS = {\r\n    visa: '^4',\r\n    amex: '^(34|37)',\r\n    mastercard: '^5[1-5]',\r\n    discover: '^6011',\r\n    unionpay: '^62',\r\n    troy: '^9792',\r\n    diners: '^(30[0-5]|36)'\r\n};\r\n\r\nconst CreditBackSide = (props) => {\r\n    const [cardCvvNumber,setCardCvvNumber] = useState([]);\r\n    const cardType = (cardNumber) => {\r\n        const number = cardNumber;\r\n        let re;\r\n        for (const [card, pattern] of Object.entries(CARDS)) {\r\n            re = new RegExp(pattern);\r\n            if (number.match(re) != null) {\r\n                return card;\r\n            }\r\n        }\r\n\r\n        return 'visa';\r\n    };\r\n\r\n    const useCardType = useMemo(() => {\r\n        return cardType(props.cardNumber);\r\n    }, [props.cardNumber]);\r\n    \r\n    useEffect(() => {\r\n        let finalCardCvvArray = []\r\n        let temp = props.cardCvv.split('')\r\n        for(let element of temp){\r\n            if(element)\r\n            finalCardCvvArray.push('*')\r\n        }\r\n        setCardCvvNumber(finalCardCvvArray);\r\n    }, [props.cardCvv]);\r\n   \r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className=\"blackStrip\"></div>\r\n                <div className=\"m-2 mt-3 d-flex justify-content-end\">\r\n                    <div className=\"cvv\">CVV</div>\r\n                </div>\r\n                <div className=\"m-2 whiteStrip d-flex justify-content-end\">\r\n                    <div className=\"cvvValue\">\r\n                        {\r\n                            props.cardCvv && cardCvvNumber.map((e, i) => <TextTransition\r\n                                key={i}\r\n                                inline\r\n                                text={e}\r\n                                springConfig={{ stiffness: 80, damping: 20 }}\r\n                                direction=\"down\"\r\n                                className=\"num pr-3\"\r\n                            />)\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"mt-4 m-1 d-flex justify-content-end\">\r\n                    <img\r\n                        alt={useCardType}\r\n                        src={process.env.PUBLIC_URL+`/credit-card-types/${useCardType}.png`}\r\n                        className=\"card-type-image\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreditBackSide;\r\n","import React, { useState, useMemo,useEffect} from 'react';\r\nimport TextTransition from \"react-text-transition\";\r\n// import CreditForm from './components/CreditForm';\r\n// import CreditCard from './components/CreditCard';\r\n\r\n// import Card from './components/card';\r\n\r\nconst CARDS = {\r\n    visa: '^4',\r\n    amex: '^(34|37)',\r\n    mastercard: '^5[1-5]',\r\n    discover: '^6011',\r\n    unionpay: '^62',\r\n    troy: '^9792',\r\n    diners: '^(30[0-5]|36)'\r\n};\r\n\r\n\r\nconst CreditFrontSide = (props) => {\r\n    let defVal = \"#### #### #### ####\";\r\n    const [numArr, setNumArr] = useState(defVal.split(''));\r\n    const cardType = (cardNumber) => {\r\n        const number = cardNumber;\r\n        let re;\r\n        for (const [card, pattern] of Object.entries(CARDS)) {\r\n            re = new RegExp(pattern);\r\n            if (number.match(re) != null) {\r\n                return card;\r\n            }\r\n        }\r\n\r\n        return 'visa';\r\n    };\r\n    const useCardType = useMemo(() => {\r\n        return cardType(props.cardNumber);\r\n    }, [props.cardNumber]);\r\n    useEffect(() => {\r\n        let temp = numArr.map(formatNumber);\r\n        setNumArr(temp);\r\n    }, [props.cardNumber]);\r\n\r\n    \r\n    const formatNumber = function(char,i){ \r\n        \r\n        if(props.type==='amex'){\r\n            if(i===4 || i===11) {    \r\n                char=' ';\r\n            }\r\n            else if(i<4 || i>13)\r\n                char = (props.cardNumber[i]===undefined)?'#':props.cardNumber[i];\r\n            else {\r\n                char = (props.cardNumber[i]===undefined)?'#':'*';\r\n            }\r\n        }\r\n        else{\r\n            if(i===4 || i===9 || i===14) {    \r\n                char=' ';\r\n            }\r\n            else if(i<4 || i>14)\r\n                char = (props.cardNumber[i]===undefined)?'#':props.cardNumber[i];\r\n            else {\r\n                char = (props.cardNumber[i]===undefined)?'#':'*';\r\n            }\r\n        }\r\n        return char; \r\n    }\r\n \r\n    return (\r\n        <div style={{color:'white'}}>\r\n            <div className=\"p-4 d-flex justify-content-between\">\r\n                <img src= {process.env.PUBLIC_URL+`/credit-card-images/chip.png`} className=\"chip\" alt=\"chip\" />\r\n                <img\r\n                    alt={useCardType}\r\n                    src={process.env.PUBLIC_URL+`/credit-card-types/${useCardType}.png`}\r\n                    className=\"card-type-image\"\r\n                />\r\n            </div>\r\n        <div  className=\"numRow mt-3 align-middle card-number-section\">\r\n            <strong>\r\n            { props.type==='amex'?\r\n                        numArr.slice(0,17).map((n,i)=>(\r\n                            <TextTransition\r\n                                inline \r\n                                key={i}\r\n                                text={ n }\r\n                                springConfig={{ stiffness: 80, damping: 20 }}\r\n                                direction=\"down\"\r\n                                className=\"num pr-3\"\r\n                                />\r\n                            )) \r\n                        :\r\n                        numArr.map((n,i)=>(\r\n                            <TextTransition\r\n                                key={i}\r\n                                inline\r\n                                text={ n }\r\n                                springConfig={{ stiffness: 80, damping: 20 }}\r\n                                direction=\"down\"\r\n                                className=\"num pr-3\"\r\n                                />\r\n                            ))\r\n                    }\r\n            </strong>\r\n        </div>\r\n        <div className=\"row card-holder-expiry-section\">\r\n            <div className=\"col-9\">\r\n                <div className=\"row h6 metaText\">Card Holder</div>\r\n                <div className=\"row h6\">\r\n                    <div className=\"pr-3 h6 card-holder-name\">{ props.cardHolder || 'VALLEM SURYA BALAJI' }</div>\r\n                {\r\n                \r\n                /* <TextTransition\r\n                    inline\r\n                    text={ props.holderName || 'Ayush Kumar' }\r\n                    springConfig={{ stiffness: 80, damping: 20 }}\r\n                    className=\"pr-3 h6\"\r\n                    direction=\"down\"\r\n                    /> */}\r\n                </div>\r\n            </div>\r\n            <div className=\"col-3\" >\r\n                <div className=\"row h6 metaText\">Expiry</div>\r\n                <div className=\"row h6\">\r\n                <TextTransition\r\n                    inline\r\n                    text={ props.cardMonth || 'MM' }\r\n                    springConfig={{ stiffness: 80, damping: 20 }}\r\n                    className=\"p-0 h6 mon\"\r\n                    direction=\"down\"\r\n                    />\r\n                    /\r\n                    <TextTransition\r\n                    inline\r\n                    text={ props.cardYear.toString().substr(2, 2) || 'YY'}\r\n                    springConfig={{ stiffness: 80, damping: 20 }}\r\n                    className=\"p-0 h6\"\r\n                    direction=\"down\"\r\n                    />\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default CreditFrontSide;\r\n","import React, { useRef,useEffect } from 'react';\r\nimport CreditBackSide from './CardBackSide'\r\nimport CreditFrontSide from './CardFrontSide'\r\n\r\nconst cardBackgroundName = () => {\r\n    let random = Math.floor(Math.random() * 25 + 1);\r\n    return `${random}.jpeg`;\r\n};\r\n\r\nconst BACKGROUND_IMG = cardBackgroundName();\r\n\r\nconst CreditCard = (props) => {\r\n    const cardRef = useRef({});\r\n    useEffect(() => {\r\n        cardRef.current.style.transform = 'rotateY(' + props.toggle + ')';\r\n    }, [props.toggle])\r\n    const myStyle = {\r\n        backgroundImage: \"url(\" +process.env.PUBLIC_URL+`/credit-card-background/${BACKGROUND_IMG}`+\")\",\r\n    };\r\n    return (\r\n        <div className=\"card-container\">\r\n            <div className=\"card-main\"  ref={cardRef} >\r\n                <div className=\"card-img card-front \" style={myStyle} >\r\n                    <CreditFrontSide  \r\n                    cardNumber={props.cardNumber}\r\n                    cardHolder={props.cardHolder}\r\n                    cardMonth={props.cardMonth}\r\n                    cardYear={props.cardYear}\r\n                    ></CreditFrontSide>\r\n                </div>\r\n                <div className=\"card-img card-back\" style={myStyle}>\r\n                    <CreditBackSide  cardNumber={props.cardNumber} cardCvv = {props.cardCvv}></CreditBackSide>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreditCard;\r\n","import React, { useState, useCallback } from 'react';\r\nimport CreditForm from './components/CreditForm';\r\nimport CreditCard from './components/CreditCard';\r\nconst initialState = {\r\n    cardNumber: '#### #### #### ####',\r\n    cardHolder: 'VALLEM SURYA BALAJI',\r\n    cardMonth: '',\r\n    cardYear: '',\r\n    cardCvv: '',\r\n    isCardFlipped: false,\r\n    toggle:'0deg',\r\n    fieldType:''\r\n};\r\n\r\nconst Main = () => {\r\n    const [state, setState] = useState(initialState);\r\n    const updateStateValues = useCallback(\r\n        (keyName, value) => {\r\n            setState({\r\n                ...state,\r\n                [keyName]: value || initialState[keyName]\r\n            });\r\n        },\r\n        [state]\r\n    );\r\n    const updateCardFlip = useCallback(\r\n        (toggleValue) => {\r\n            setState({\r\n                ...state,\r\n               toggle: toggleValue || initialState['toggle']\r\n            });\r\n        },\r\n        [state]\r\n    )\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <CreditForm\r\n                cardMonth={state.cardMonth}\r\n                cardYear={state.cardYear}\r\n                onUpdateState={updateStateValues}\r\n                onFlipCreditCard={updateCardFlip}\r\n            >\r\n                <CreditCard \r\n                    cardNumber={state.cardNumber}\r\n                    cardHolder={state.cardHolder}\r\n                    cardMonth={state.cardMonth}\r\n                    cardYear={state.cardYear}\r\n                    cardCvv={state.cardCvv}\r\n                    isCardFlipped={state.isCardFlipped}\r\n                    toggle = {state.toggle}\r\n                    onUpdateState\r\n                    onFlipCreditCard>\r\n                </CreditCard>\r\n            </CreditForm>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","\nimport './App.css';\nimport Main from './Main'\n\nfunction App() {\n  return (\n   <Main />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import '../node_modules/bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}